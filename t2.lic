=begin
        Alternative trainer script which kicks off sub-scripts based on
        current mindstates.  See Leustyin-setup and Chuno-setup for examples
        This script uses the `training_list` key to define the skills to train
        and thresholds in which the scrips should be started
=end

custom_require.call(%w[common drinfomon common-travel equipmanager])

class T2
  include DRC
  include DRCT

  def initialize
    fput('avoid !join')
    fput('avoid !hold')
    fput('avoid !drag')
    fput('awaken')

    @counter = 0
    @settings = get_settings
    @repair_timer = @settings.repair_timer
    UserVars.repair_timer_snap ||= Time.now
    UserVars.t2_timers ||= {}

    loop do
      trainables = @settings['training_list']
      EquipmentManager.new.empty_hands

      trainables.each do |trainable|
        if trainable['skill'].is_a? Array
          next if trainable['skill'].each.reject { |skill| DRSkill.getxp(skill) >= trainable['start'] }.empty?
        elsif DRSkill.getxp(trainable['skill']) >= trainable['start']
          message "Skipping skill: #{trainable['skill']}"
          next
        elsif has_cooldown? trainable['skill']
          next unless cooldown_expired? trainable['skill']
        end

        
        # At this point we know that we need to train the skill
        message "***STATUS*** Starting #{trainable['skill']}"
        execute_actions(trainable['scripts'])
        update_cooldown trainable['skill'] if has_cooldown? trainable['skill']
        break
      end

      #wait_for_script_to_complete('safe-room')

      if check_repair
        repair_town = @settings.hometown
        repair_town = @settings.repair_town if @settings.repair_town
        wait_for_script_to_complete('repair', [repair_town]) 
      end
    end
  end
 
  def has_cooldown?(skill)
    @settings.exp_timers.keys.include? skill
  end

  def cooldown_expired?(skill)
    UserVars.t2_timers[skill].nil? || Time.now - @settings.exp_timers[skill] >= UserVars.t2_timers[skill]
  end

  def update_cooldown(skill)
    UserVars.t2_timers[skill] = Time.now
  end

  def execute_actions(actions)
    message 'Action'
    actions.each do |action|
      message "***STATUS*** EXECUTE #{action}"
      action_parts = action.split(' ')
      script_name = action_parts.shift
      wait_for_script_to_complete(script_name, action_parts)
    end
  end;
  
  def check_repair
    return false unless should_repair_by_time

    UserVars.repair_timer_snap = Time.now
    true
  end

  def should_repair_by_time
    return false if @repair_timer.nil?
    return false if Time.now - UserVars.repair_timer_snap < @repair_timer
    true
  end
end

before_dying do
  scripts = ['magic', 'hunting-buddy', 'performance', 'athletics', 'first-aid', 'outdoorsmanship', 'bitchin-pick', 'foragetask']
  scripts.each do |script_name|
    stop_script(script_name) if Script.running?(script_name)
  end
  fput('release cyclic')
end

T2.new
